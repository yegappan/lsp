*lsp.txt*	Language Server Protocol (LSP) Plugin for Vim9

Author: Yegappan Lakshmanan  (yegappan AT yahoo DOT com)
For Vim version 9.0 and above
Last change: Oct 21, 2022

==============================================================================
						*lsp-license*
License: MIT License
Copyright (c) 2020-2022 Yegappan Lakshmanan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
==============================================================================
1. Overview					*lsp-overview*

The Language Server Protocol (LSP) plugin implements a LSP client for Vim9.
Refer to the following pages for more information about LSP:

    https://microsoft.github.io/language-server-protocol/
    https://langserver.org/

This plugin needs Vim version 9.0 and after. You will need a language
specific server in your system to use this plugin. Refer to the above pages
for a list of available language servers for the various programming
languages.

The Github repository for this plugin is available at:

      http://github.com/yegappan/lsp

==============================================================================
2. Installation					*lsp-installation*

You can install this plugin directly from github using the following steps:

    $ mkdir -p $HOME/.vim/pack/downloads/opt
    $ cd $HOME/.vim/pack/downloads/opt
    $ git clone https://github.com/yegappan/lsp

or you can use any one of the Vim plugin managers (dein.vim, pathogen, vam,
vim-plug, volt, Vundle, etc.) to install and manage this plugin.

To uninstall the LSP plugin, either use the uninstall command provided by the
plugin manager or manually remove the $HOME/.vim/pack/downloads/lsp directory.

To use this plugin, add the following line to your .vimrc file:

    packadd lsp

==============================================================================
3. Usage					*lsp-usage*

The following commands are provided:

:LspShowServers		Display the list of registered LSP servers
:LspGotoDefinition	Go to the definition of the symbol under cursor
:LspGotoDeclaration	Go to the declaration of the symbol under cursor
:LspGotoTypeDef		Go to the type definition of the symbol under cursor
:LspGotoImpl		Go to the implementation of the symbol under cursor
:LspPeekDefinition	Open the definition of the symbol under cursor in the
			preview window.
:LspPeekDeclaration	Open the declaration of the symbol under cursor in the
			preview window.
:LspPeekTypeDef		Open the type definition of the symbol under cursor in
			the preview window.
:LspPeekImpl		Open the implementation of the symbol under cursor in
			the preview window.
:LspShowSignature	Display the signature of the symbol under cursor.
:LspDiagShow		Display the diagnostics messages from the LSP server
			for the current buffer in a location list.
:LspDiagFirst		Jump to the first diagnostic message for the current
			buffer.
:LspDiagNext		Jump to the next diagnostic message for the current
			buffer after the current line.
:LspDiagPrev		Jump to the previous diagnostic message for the current
			buffer before the current line.
:LspDiagCurrent		Display the diagnostic message for the current line.
:LspDiagHighlightEnable	Enable highlighting lines with a diagnostic message
			for the current Vim session.
:LspDiagHighlightDisable
			Disable highlighting lines with a diagnostic message
			for the current Vim session.
:LspShowReferences	Display the list of references to the keyword under
			cursor in a new location list.
:LspPeekReferences	Display the list of references to the keyword under
			cursor in a location list associated with the preview
			window.
:LspSwitchSourceHeader	Switch between source and header files.
:LspHighlight		Highlight all the matches for the keyword under cursor
:LspHighlightClear	Clear all the matches highlighted by :LspHighlight
:LspOutline		Show the list of symbols defined in the current file
			in a separate window.
:LspFormat		Format the current file using the LSP server.
:{range}LspFormat	Format the specified range of lines.
:LspIncomingCalls	Display the list of symbols calling the current symbol
			in a new location list.
:LspOutgoingCalls	Display the list of symbols called by the current
			symbol in a new location list.
:LspRename		Rename the current symbol
:LspCodeAction		Apply the code action supplied by the LSP server to
			the diagnostic in the current line.
:LspSymbolSearch	Perform a workspace wide search for a symbol
:LspSelectionExpand	Expand the current symbol range visual selection
:LspSelectionShrink	Shrink the current symbol range visual selection
:LspFold		Fold the current file
:LspWorkspaceAddFolder {folder}
			Add a folder to the workspace
:LspWorkspaceRemoveFolder {folder}
			Remove a folder from the workspace
:LspWorkspaceListFolders
			Show the list of folders in the workspace
:LspShowServerCapabilities
			Display the list of capabilities of a LSP server.
:LspServerRestart	Restart the LSP server for the current buffer.

==============================================================================
4. Configuration				*lsp-configuration*

To register one or more LSP servers, use the LspAddServer() function with a
list of LSP server details in the .vimrc file.

For example, to add the LSP servers for the Javascript, Typescript and Python
file types, add the following commands to the .vimrc file: >

   let lspServers = [
		\     #{
		\	 filetype: ['javascript', 'typescript'],
		\	 path: '/usr/local/bin/typescript-language-server',
		\	 args: ['--stdio']
		\      },
		\     #{
		\	 filetype: 'python',
		\	 path: '/usr/local/bin/pyls',
		\	 args: ['--check-parent-process', '-v']
		\      }
		\   ]
   call LspAddServer(lspServers)
<
Depending on the location of the typescript and python pyls language servers
installed in your system, update the 'path' in the above snippet
appropriately.

Another example, for adding the LSP servers for the C, C++, Golang, Rust, 
Shell script, Vim script and PHP file types: >

   let lspServers = [
		\     #{
		\        filetype: ['c', 'cpp'],
		\        path: '/usr/local/bin/clangd',
		\        args: ['--background-index']
		\     },
                \     #{ 
                \        filetype: ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],
                \        path: '/path/to/.go/bin/gopls',
                \        args: [],
                \        syncInit: v:true,
                \      },
                \     #{
                \        filetype: ['rust'],
                \        path: '/path/to/.cargo/bin/rust-analyzer',
                \        args: [],
                \        syncInit: v:true,
                \      },
		\     #{
		\	 filetype: 'sh',
		\	 path: '/usr/local/bin/bash-language-server',
		\	 args: ['start']
		\     },
		\     #{
		\	 filetype: ['vim'],
		\	 path: '/usr/local/bin/vim-language-server',
		\	 args: ['--stdio']
		\     },
		\     #{
		\        filetype: ['php'],
		\        path: '/usr/local/bin/intelephense',
		\        args: ['--stdio'],
		\        syncInit: v:true,
		\        initializationOptions: {
		\          licenceKey: 'xxxxxxxxxxxxxxx'
		\        }
		\      }
		\   ]
   call LspAddServer(lspServers)
<
To add a LSP server, the following information is needed:

	filetype	One or more file types supported by the LSP server.
			This can be a |String| or a |List|. To specify
			multiple multiple file types, use a List.
	path		complete path to the LSP server executable (without
			any arguments).
	args		a list of command-line arguments passed to the LSP
			server. Each argument is a separate List item.
	omnicompl	(Optional) a boolean value that enables (true)
			or disables (false) omni-completion for this file
			types. By default this is set to 'v:true'.
	syncInit        (Optional) for lsp servers (e.g. rust analyzer, gopls)
			that take time to reply to a 'initialize' request
			message this should be set to 'v:true'. If this is set
			to true, then a synchronous call is used to initialize
			the LSP server, otherwise the server is initialized
			asynchronously. By default this is set to 'v:false'.
	initializationOptions
			(Optional) for lsp servers (e.g. intelephense) some
			additional initialization options may be required
			or useful for initialization. Those can be provided in
			this dictionary and if present will be transmitted to
			the lsp server.

The LSP servers are added using the LspAddServer() function. This function
accepts a list of LSP servers with the above information.

							*lsp-options*
Some of the LSP plugin features can be enabled or disabled by using the
LspOptionsSet() function. This function accepts a dictionary argument with the
following optional items:

autoComplete		In insert mode, automatically complete the current
			symbol. Otherwise use omni-completion. By default this
			is set to true.
autoHighlight		In normal mode, automatically highlight all the
			occurrences of the symbol under the cursor. By default
			this is set to false.
showSignature		In insert mode, automatically show the current symbol
			signature in a popup. By default this is set to true.
echoSignature		In insert mode, echo the current symbol signature
			instead of showing it in a popup. By default this is
			set to false.
autoHighlightDiags	Automatically place signs on the lines with a
			diagnostic message from the LSP server. By default
			this is set to true.
autoPopulateDiags	Automatically populate the location list with
			diagnostics from the LSP server. By default this is
			set to false.
keepFocusInReferences	Focus on the location list window after
			LspShowReferences.  By default this is set to false.
noNewlineInCompletion	Suppress adding a new line on completion selection
			with <CR>.
			By default this is set to false.
outlineWinSize		Outline window size, by default this is 20.
outlineOnRight		Open the outline window on the right side, by default
			this is false.
noDiagHoverOnLine	Suppress diagnostic hover from appearing when
			the mouse is over the line instead of the signature
			By default this is set to true.
showDiagOnStatusLine	Show a diagnostic message on a status line
			By default this is set to false.
ignoreMissingServer	Do not print a missing language server executable.
			By default this is set to false
markdownHighlight       When completing with complete-popup enables syntax
                        highlighting for documentation with markdown. By
                        default this is set to true.
markdownCompact         Makes the markdown syntax highlighting more compact by
                        joining lines at the '```lang' code-fences eliminating
                        blank lines. Also enables concealing of code-fences.

For example, to disable the automatic placement of signs for the LSP
diagnostic messages, you can add the following line to your .vimrc file:

	call LspOptionsSet({'autoHighlightDiags': v:false})

==============================================================================
5. Commands						*lsp-commands*

						*:LspShowServers*
:LspShowServers		Displays the list of registered LSP servers and their
			status. The LSP servers are registered using the
			LspAddServer() function. The output shows the Vim
			file type, the corresponding LSP server status and the
			path to the LSP server executable.

						*:LspGotoDefinition*
:LspGotoDefinition	Jumps to the definition of the symbol under the
			cursor.  If the file is already present in a window,
			then jumps to that window.  Otherwise, opens the file
			in a  new window.  If the current buffer is modified
			and 'hidden' is not set or if the current buffer is a
			special buffer, then a new window is opened.  If the
			jump is successful, then the current cursor location
			is pushed onto the tag stack.  The |CTRL-T| command
			can be used to go back up the tag stack.  Also the
			|``| mark is set to the position before the jump.

			You may want to map a key to invoke this command: >

			    nnoremap <buffer> gd <Cmd>LspGotoDefinition<CR>
<
						*:LspGotoDeclaration*
:LspGotoDeclaration	Jumps to the declaration of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command.

						*:LspGotoTypeDef*
:LspGotoTypeDef		Jumps to the type definition of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command. Note that not all the LSP
			servers support this feature.

			You may want to map a key to invoke this command: >

			    nnoremap <buffer> gt <Cmd>LspGotoTypeDef<CR>
<
						*:LspGotoImpl*
:LspGotoImpl		Jumps to the implementation of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command. Note that not all the LSP
			servers support this feature.

			You may want to map a key to invoke this command: >

			    nnoremap <buffer> gi <Cmd>LspGotoImpl<CR>
<
						*:LspPeekDefinition*
:LspPeekDefinition	Displays the line where the symbol under the cursor is
			defined in the |preview-window|. The symbol is
			highlighted in the preview window.

						*:LspPeekDeclaration*
:LspPeekDeclaration	Displays the line where the symbol under the
			cursor is declared in the |preview-window|. The
			behavior of this command is similar to the
			|:LspPeekDefinition| command.

						*:LspPeekTypeDef*
:LspPeekTypeDef		Displays the line where the type of the symbol under
			the cursor is defined in the |preview-window|. The
			behavior of this command is similar to the
			|:LspPeekDefinition| command. Note that not all the
			LSP servers support this feature.

						*:LspPeekImpl*
:LspPeekImpl		Displays the implementation of the symbol under the
			cursor in the |preview-window|. The behavior of this
			command is similar to the |:LspPeekDefinition|
			command. Note that not all the LSP servers support
			this feature.

						*:LspShowSignature*
:LspShowSignature	Displays the signature of the symbol (e.g. a function
			or method) before the cursor in a popup.

			The popup is also automatically displayed in insert
			mode after entering a symbol name followed by a
			separator (e.g. a opening parenthesis). To disable
			this, you can set the showSignature option to false in
			your .vimrc file: >

			    call LspOptionsSet({'showSignature': v:false})
<
			Default is true.

			You can get the function signature echoed in cmdline
			rather than displayed in popup if you use >

			    call LspOptionsSet({'echoSignature': v:true})
<
			Default is false.

						*:LspSwitchSourceHeader*
:LspSwitchSourceHeader	Switch between source and header files. This is a
			Clangd specific extension and only works with C/C++
			source files.

						*:LspDiagShow*
:LspDiagShow		Creates a new location list with the diagnostics
			messages (if any) from the LSP server for the current
			file and opens the location list window. You can use
			the Vim location list commands to browse the list.

						*:LspDiagFirst*
:LspDiagFirst		Jumps to the location of the first diagnostic message
			for the current file.

						*:LspDiagNext*
:LspDiagNext		Jumps to the location of the diagnostic message after
			the current cursor position.

						*:LspDiagPrev*
:LspDiagPrev		Jumps to the location of the diagnostic message before
			the current cursor position.

						*:LspDiagCurrent*
:LspDiagCurrent		Displays the diagnostic message (if any) for the
			current line.

						*:LspDiagHighlightEnable*
:LspDiagHighlightEnable	Enable highlighting lines with a diagnostic message
			for the current Vim session.  Note that highlighting
			lines with a diagnostic message is enabled by default.

:LspDiagHighlightDisable			*:LspDiagHighlightDisable*
			Disable highlighting lines with a diagnostic message
			for the current Vim session.
			To always disable the highlighting, set the
			autoHighlightDiags option to false.

						*:LspShowReferences*
:LspShowReferences	Creates a new location list with the list of locations
			where the symbol under the cursor is referenced and
			opens the location window.

						*:LspPeekReferences*
:LspPeekReferences	Opens the preview window and creates a new location
			list with the list of locations where the symbol under
			the cursor is referenced and opens the location window.

						*:LspHighlight*
:LspHighlight		Highlights all the matches for the symbol under
			cursor. The text, read and write references to the
			symbol are highlighted using Search, DiffChange and
			DiffDelete highlight groups respectively.

						*:LspHighlightClear*
:LspHighlightClear	Clears all the symbol matches highlighted by the
			|:LspHighlight| command.

						*:LspOutline*
:LspOutline		Opens a vertically split window with the list of
			symbols defined in the current file. The current
			symbol is highlighted. The symbols are grouped by
			their type. You can select a symbol and press <Enter>
			to jump to the position of the symbol. As you move the
			cursor in a file, the current symbol is automatically
			highlighted in the outline window. If you open a new
			file, the outline window is automatically updated with
			the symbols in the new file.  Folds are created in the
			outline window for the various group of symbols.

						*:LspFormat*
:LspFormat		Format the current file using the LSP server.

:{range}LspFormat	Format the specified range of lines in the current
			file using the LSP server.

						*:LspIncomingCalls*
:LspIncomingCalls	Creates a new location list with the location of the
			list of symbols calling the current symbol.

						*:LspOutoingCalls*
:LspOutoingCalls	Creates a new location list with the location of
			the list of symbols called by the current symbol.

						*:LspRename*
:LspRename		Rename the current symbol. You will be prompted to
			enter the new name for the symbol. You can press <Esc>
			or enter an empty string in the prompt to cancel the
			operation.

						*:LspCodeAction*
:LspCodeAction		Apply the code action supplied by the LSP server to
			the diagnostic in the current line. This works only if
			there is a diagnostic message for the current line.
			You can use the |:LspDiagCurrent| command to display
			the diagnostic for the current line. You will be
			prompted to select one of the actions supplied by the
			LSP server.

						*:LspSymbolSearch*
:LspSymbolSearch <sym>	Perform a workspace wide search for the symbol <sym>.
			If <sym> is not supplied, then you will be prompted to
			enter the symbol name (the keyword under the cursor is
			used as the default).  A popup window is opened with
			the list of matching symbols.  You can enter a few
			characters to narrow down the list of matches. The
			displayed symbol name can be erased by pressing
			<Backspace> or <C-U> and a new symbol search pattern
			can be entered.  You can close the popup menu by
			pressing the escape key or by pressing CTRL-C.

			In the popup menu, the following keys can be used:

				CTRL-F     - Scroll one page forward
				<PageDown> - idem
				CTRL-B     - Scroll one page backward
				<PageUp>   - idem
				CTRL-Home  - Jump to the first entry
				CTRL-End   - Jump to the last entry
				<Up>       - Go up one entry
				<C-P>      - idem
				<Down>     - Go down one entry
				<C-N>      - idem
				<Enter>    - Open the selected file
				<Esc>      - Close the popup menu
				<CTRL-C>   - idem
				<BS>       - Erase one character from the
					     filter text
				<C-H>      - idem
				<C-U>      - Erase the filter text

			Any other alphanumeric key will be used to narrow down
			the list of names displayed in the popup menu. When
			you type a filter string, then only the symbols fuzzy
			matching the string are displayed in the popup menu.
			You can enter a new search pattern to do a workspace
			wide symbol search.

						*:LspHover*
:LspHover		Show the documentation for the symbol under the cursor
			in a popup window. If you want to show the symbol
			documentation in the preview window instead of in a
			popup set >

				call LspOptionsSet({'hoverInPreview': v:true})
<
			Default is false

						*:LspSelectionExpand*
:LspSelectionExpand	Visually select the region of the symbol under the
			cursor.  In visual mode, expands the current symbol
			visual region selection to include the next level.

			For example, if the cursor is on a "for" statement,
			this command selects the "for" statement and the body
			of the "for" statement.

			It is useful to create a visual map to use this
			command.  Example: >

			 xnoremap <silent> <Leader>e <Cmd>LspSelectionExpand<CR>
<
			With the above map, you can press "\e" in visual mode
			successively to expand the current symbol visual
			region.

						*:LspSelectionShrink*
:LspSelectionShrink	Shrink the current symbol range visual selection. It
			is useful to create a visual map to use this command.
			Example: >

			 xnoremap <silent> <Leader>s <Cmd>LspSelectionShrink<CR>
<
			With the above map, you can press "\s" in visual mode
			successively to shrink the current symbol visual
			region.

						*:LspFold*
:LspFold		Fold the current file.

						*:LspWorkspaceAddFolder*
:LspWorkspaceAddFolder {folder}
			Add a folder to the workspace

						*:LspWorkspaceRemoveFolder*
:LspWorkspaceRemoveFolder {folder}
			Remove a folder from the workspace

:LspWorkspaceListFolders			*:LspWorkspaceListFolders*
			Show the list of folders in the workspace.

:LspShowServerCapabilities			*:LspShowServerCapabilities*
			Display the list of capabilities of a LSP server.
			The server capabilities are described in the LSP
			protocol specification under the "ServerCapabilities"
			interface.

						*:LspServerRestart*
:LspServerRestart	Restart (stop and then start) the LSP server for the
			current buffer. All the loaded buffers with the same
			filetype as the current buffer are added back to the
			server.

==============================================================================
6. Insert mode completion

By default, in insert mode, the LSP plugin automatically displays the matches
for the symbol under the cursor in an insert-completion popup menu. You can
use the keys described in |popupmenu-keys| with this menu.

To disable the auto-compeltion, you can set the autoComplete option to v:false
in your .vimrc file: >

	call LspOptionsSet({'autoComplete': v:false})
<
If this variable is set, then the LSP plugin doesn't automatically start
completion in insert mode and instead supports omni-completion (|compl-omni|).
It sets the 'omnifunc' option for the buffers which have a registered LSP
server. To complete a symbol in insert mode manually, you can press CTRL-X
CTRL-O to invoke completion using the items suggested by the LSP server.

You can also enable or disable omni-completion based on a file type by setting
the 'omnicompl' item to 'false' when registering a lsp server for the
filetype. If this item is not specified, then omni-completion is enabled by
default. The following example disables omni-completion for python: >

	let lspServers = [
		\     {
		\	'filetype': 'python',
		\	'omnicompl': v:false,
		\	'path': '/usr/local/bin/pyls',
		\	'args': ['--check-parent-process', '-v']
		\     }
		\   ]
<
If you want to use omni completion, in addition to the automatic completion,
then you can set the 'omnifunc' option to the "LspOmniFunc" function: >

	set omnifunc=LspOmniFunc
<
To use omni completion, press CTRL-X CTRL-O in insert mode.  Refer to
|compl-omni| for more information.

==============================================================================
7. Autocommands						*lsp-autocmds*

						*LspAttached*
LspAttached      A |User| autocommand fired when the LSP client
			attaches to a buffer. Can be used to configure
			buffer-local mappings or options.

						*LspCompletePopup*
LspCompletePopup A |User| autocommand fired before the LSP client
			shows the popup (advanced). See |complete-popuphidden|.

		 An example: >

	def MyPopup()
		var win_id = popup_findinfo()
		var buf_id = winbufnr(win_id)
	 	if buf_id < 2 || win_id == 0
		# popup not ready yet
		else
			var doc: dict<any> = v:event.completed_item->
			\ get('user_data', {})->get('documentation', {})
			if !empty(doc)
				popup_show(win_id)
			endif
		endif
	enddef

	autocmd User LspCompletePopup MyPopup()
<


vim:tw=78:ts=8:noet:ft=help:norl:
