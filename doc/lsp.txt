*lsp.txt*	Language Server Protocol (LSP) Plugin for Vim9

Author: Yegappan Lakshmanan  (yegappan AT yahoo DOT com)
For Vim version 8.2.2342 and above
Last change: Feb 24, 2021

==============================================================================
						*lsp-license*
License: MIT License
Copyright (c) 2020 Yegappan Lakshmanan

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the
rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
IN THE SOFTWARE.
==============================================================================
1. Overview					*lsp-overview*

The Language Server Protocol (LSP) plugin implements a LSP client for Vim9.
Refer to the following pages for more information about LSP:

    https://microsoft.github.io/language-server-protocol/
    https://langserver.org/

This plugin needs Vim version 8.2.2342 and after. You will need a language
specific server in your system to use this plugin. Refer to the above pages
for a list of available language servers for the various programming
languages.

The Github repository for this plugin is available at:

      http://github.com/yegappan/lsp

==============================================================================
2. Installation					*lsp-installation*

You can install this plugin directly from github using the following steps:

    $ mkdir -p $HOME/.vim/pack/downloads/lsp
    $ cd $HOME/.vim/packa/downloads/lsp
    $ git clone https://github.com/yegappan/lsp

or you can use any one of the Vim plugin managers (dein.vim, pathogen, vam,
vim-plug, volt, Vundle, etc.) to install and manage this plugin.

To uninstall the LSP plugin, either use the uninstall command provided by the
plugin manager or manually remove the $HOME/.vim/pack/downloads/lsp directory.

To use this plugin, add the following line to your .vimrc file:

    packadd lsp

==============================================================================
3. Usage					*lsp-usage*

The following commands are provided:

:LspShowServers		Display the list of registered LSP servers
:LspGotoDefinition	Go to the definition of the symbol under cursor
:LspGotoDeclaration	Go to the declaration of the symbol under cursor
:LspGotoTypeDef		Go to the type definition of the symbol under cursor
:LspGotoImpl		Go to the implementation of the symbol under cursor
:LspShowSignature	Display the signature of the symbol under cursor.
:LspDiagShow		Display the diagnostics messages from the LSP server
			for the current buffer in a location list.
:LspDiagFirst		Jump to the first diagnostic message for the current
			buffer.
:LspDiagNext		Jump to the next diagnostic message for the current
			buffer after the current line.
:LspDiagPrev		Jump to the previous diagnostic message for the current
			buffer before the current line.
:LspDiagCurrent		Display the diagnostic message for the current line.
:LspShowReferences	Display the list of references to the keyword under
			cursor in a new location list.
:LspHighlight		Highlight all the matches for the keyword under cursor
:LspHighlightClear	Clear all the matches highlighted by :LspHighlight
:LspOutline		Show the list of symbols defined in the current file
			in a separate window.
:LspFormat		Format the current file using the LSP server.
:{range}LspFormat	Format the specified range of lines.
:LspCalledBy		Display the list of symbols called by the current
			symbol. (NOT IMPLEMENTED YET).
:LspCalling		Display the list of symbols calling the current symbol
			(NOT IMPLEMENTED YET).
:LspRename		Rename the current symbol
:LspCodeAction		Apply the code action supplied by the LSP server to
			the diagnostic in the current line.
:LspSymbolSearch	Perform a workspace wide search for a symbol
:LspSelectionRange	Visually select the current symbol range
:LspFold		Fold the current file
:LspWorkspaceAddFolder {folder}
			Add a folder to the workspace
:LspWorkspaceRemoveFolder {folder}
			Remove a folder from the workspace
:LspWorkspaceListFolders
			Show the list of folders in the workspace

==============================================================================
4. Configuration				*lsp-configuration*

To register one or more LSP servers, use the lsp#addServer() function with a
list of LSP server details in the .vimrc file.

For example, to add the LSP servers for the Javascript, Typescript and Python
file types, add the following commands to the .vimrc file: >

   let lspServers = [
		\     {
		\	'filetype': ['javascript', 'typescript'],
		\	'path': '/usr/local/bin/typescript-language-server',
		\	'args': ['--stdio']
		\     },
		\     {
		\	'filetype': 'python',
		\	'path': '/usr/local/bin/pyls',
		\	'args': ['--check-parent-process', '-v']
		\     }
		\   ]
   call lsp#addServer(lspServers)
<
Depending on the location of the typescript and python pyls language servers
installed in your system, update the 'path' in the above snippet
appripriately.

Another example, for adding the LSP servers for the C, C++, Shell script and
Vim file types: >

   let lspServers = [
		\     #{
		\        filetype: ['c', 'cpp'],
		\        path: '/usr/local/bin/clangd',
		\        args: ['--background-index']
		\     },
		\     #{
		\	 filetype: 'sh',
		\	 path: '/usr/local/bin/bash-language-server',
		\	 args: ['start']
		\     },
		\     #{
		\	 filetype: ['vim'],
		\	 path: '/usr/local/bin/vim-language-server',
		\	 args: ['--stdio']
		\     }
		\   ]
   call lsp#addServer(lspServers)
<
To add a LSP server, the following information is needed:

	filetype	One or more file types supported by the LSP server.
			This can be a |String| or a |List|. To specify
			multiple multiple file types, use a List.
	path		complete path to the LSP server executable (without
			any arguments).
	args		a list of command-line arguments passed to the LSP
			server. Each argument is a separate List item.
	omnicompl	a boolean value that enables (true) or disables
			(false) omni-completion for this file type.

The LSP servers are added using the lsp#addServer() function. This function
accepts a list of LSP servers with the above information.

==============================================================================
5. Commands						*lsp-commands*

						*:LspShowServers*
:LspShowServers		Displays the list of registered LSP servers and their
			status. The LSP servers are registered using the
			lsp#addServer() function. The output shows the Vim
			file type, the corresponding LSP server status and the
			path to the LSP server executable.

			And check 'lsp#serverStatus(&ft)' as well, it returns
			LSP server status for current filetype:
			- Return true if running.
			- Return false if not found or not running.
			You can register it into 'stl' as well if needed.

						*:LspGotoDefinition*
:LspGotoDefinition	Jumps to the definition of the symbol under the
			cursor. If the file is already present in a window,
			then jumps to that window. Otherwise, opens the file
			in a  new window. If the jump is successful, then the
			current cursor location is pushed onto the tag stack.
			Also the |``| mark is set to the position before the
			jump.

						*:LspGotoDeclaration*
:LspGotoDeclaration	Jumps to the declaration of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command.

						*:LspGotoTypeDef*
:LspGotoTypeDef		Jumps to the type definition of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command. Note that not all the LSP
			servers support this feature.

						*:LspGotoImpl*
:LspGotoImpl		Jumps to the implementation of the symbol under the
			cursor. The behavior of this command is similar to the
			|:LspGotoDefinition| command. Note that not all the LSP
			servers support this feature.

						*:LspShowSignature*
:LspShowSignature	Displays the signature of the symbol (e.g. a function
			or method) before the cursor in a popup.

			The popup is also automatically displayed in insert
			mode after entering a symbol name followed by a
			separator (e.g. a opening parenthesis). Unless if: >
			let g:LSP_Show_Signature = v:false
<
			Default is true.

						*:LspDiagShow*
:LspDiagShow		Creates a new location list with the diagnostics
			messages (if any) from the LSP server for the current
			file and opens the location list window. You can use
			the Vim location list commands to browse the list.

						*:LspDiagFirst*
:LspDiagFirst		Jumps to the location of the first diagnostic message
			for the current file.

						*:LspDiagNext*
:LspDiagNext		Jumps to the location of the diagnostic message after
			the current cursor position.

						*:LspDiagPrev*
:LspDiagPrev		Jumps to the location of the diagnostic message before
			the current cursor position.

						*:LspDiagCurrent*
:LspDiagCurrent		Displays the diagnostic message (if any) for the
			current line.

						*:LspShowReferences*
:LspShowReferences	Creates a new location list with the list of locations
			where the symbol under the cursor is referenced and
			opens the location window.

						*:LspHighlight*
:LspHighlight		Highlights all the matches for the symbol under
			cursor. The text, read and write references to the
			symbol are highlighted using Search, DiffChange and
			DiffDelete highlight groups respectively.

						*:LspHighlightClear*
:LspHighlightClear	Clears all the symbol matches highlighted by the
			|:LspHighlight| command.

						*:LspOutline*
:LspOutline		Opens a vertically split window with the list of
			symbols defined in the current file. The current
			symbol is highlighted. The symbols are grouped by
			their type. You can select a symbol and press <Enter>
			to jump to the position of the symbol. As you move the
			cursor in a file, the current symbol is automatically
			highlighted in the outline window. If you open a new
			file, the outline window is automatically updated with
			the symbols in the new file.  Folds are created in the
			outline window for the various group of symbols.

						*:LspFormat*
:LspFormat		Format the current file using the LSP server.

:{range}LspFormat	Format the specified range of lines in the current
			file using the LSP server.

						*:LspCalledBy*
:LspCalledBy		Display the list of symbols called by the current
			symbol. (NOT IMPLEMENTED YET).

						*:LspCalling*
:LspCalling		Display the list of symbols calling the current symbol
			(NOT IMPLEMENTED YET).

						*:LspRename*
:LspRename		Rename the current symbol. You will be prompted to
			enter the new name for the symbol. You can press <Esc>
			or enter an empty string in the prompt to cancel the
			operation.

						*:LspCodeAction*
:LspCodeAction		Apply the code action supplied by the LSP server to
			the diagnostic in the current line. This works only if
			there is a diagnostic message for the current line.
			You can use the |:LspDiagCurrent| command to display
			the diagnostic for the current line. You will be
			prompted to select one of the actions supplied by the
			LSP server.

						*:LspSymbolSearch*
:LspSymbolSearch <sym>	Perform a workspace wide search for the symbol <sym>.
			A popup window is opened with the list of matching
			symbols.  You can enter a few characters to narrow
			down the list of matches. You can close the popup menu
			by pressing the escape key or by pressing CTRL-C.

			In the popup menu, the following keys can be used:

				CTRL-F     - Scroll one page forward
				<PageDown> - idem
				CTRL-B     - Scroll one page backward
				<PageUp>   - idem
				CTRL-Home  - Jump to the first entry
				CTRL-End   - Jump to the last entry
				<Up>       - Go up one entry
				<C-P>      - idem
				<Down>     - Go down one entry
				<C-N>      - idem
				<Enter>    - Open the selected file
				<Esc>      - Close the popup menu
				<CTRL-C>   - idem
				<BS>       - Erase one character from the
					     filter text
				<C-H>      - idem
				<C-U>      - Erase the filter text

			Any other alphanumeric key will be used to narrow down
			the list of names displayed in the popup menu. When
			you type a filter string, then only the symbols fuzzy
			matching the string are displayed in the popup menu.
			You can enter a new search pattern to do a workspace
			wide symbol search.

						*:LspHover*
:LspHover		Show the documentation for the symbol under the cursor
			in a popup window.

						*:LspSelectionRange*
:LspSelectionRange	Visually select the current symbol range.

						*:LspFold*
:LspFold		Fold the current file.

						*:LspWorkspaceAddFolder*
:LspWorkspaceAddFolder {folder}
			Add a folder to the workspace

						*:LspWorkspaceRemoveFolder*
:LspWorkspaceRemoveFolder {folder}
			Remove a folder from the workspace

						*:LspWorkspaceListFolders*
:LspWorkspaceListFolders
			Show the list of folders in the workspace.

==============================================================================
6. Insert mode completion

By default, in insert mode, the LSP plugin automatically displays the matches
for the symbol under the cursor in an insert-completion popup menu. You can
use the keys described in |popupmenu-keys| with this menu.

To disable the auto-compeltion, you can set the LSP_24x7_Complete variable
to v:false in your .vimrc file: >

	let g:LSP_24x7_Complete = v:false
<
If this variable is set, then the LSP plugin doesn't automatically start
completion in insert mode and instead supports omni-completion (|compl-omni|).
It sets the 'omnifunc' option for the buffers which have a registered LSP
server. To complete a symbol in insert mode manually, you can press CTRL-X
CTRL-O to invoke completion using the items suggested by the LSP server.

You can also enable or disable omni-completion based on a file type by setting
the 'omnicompl' item to 'false' when registering a lsp server for the
filetype. If this item is not specified, then omni-completion is enabled by
default. The following example disables omni-completion for python: >

	let lspServers = [
		\     {
		\	'filetype': 'python',
		\	'omnicompl': v:false,
		\	'path': '/usr/local/bin/pyls',
		\	'args': ['--check-parent-process', '-v']
		\     }
		\   ]
<
==============================================================================

vim:tw=78:ts=8:noet:ft=help:norl:
